options{
  LOOKAHEAD=6;
}

PARSER_BEGIN(GraceCompiler)

/** Simple brace matcher. */
public class GraceCompiler {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    GraceCompiler parser = new GraceCompiler(System.in);
    parser.parseOneLine();
  }

}

PARSER_END(GraceCompiler)

SKIP :
{
  " "
| "\t"
| "\r"
| <"//" (~["\r", "\n"])*>
}

TOKEN :
{
 
  // definitions

   <_DEF: "def">
  |<_VAR: "var">
  |<_TYPE: "int" | "bool" | "string">

  // primitives

  |<_BOOL: "true" | "false">
  |<_INT: (["0"-"9"])+>
  |<_STR: ["\""] (<_CHAR> | <_INT> | " ")* ["\""]>
  |<_CHAR: ["a"-"z"] | ["A" - "Z"] | ["_"]>

  //  operators and symbols

  |<_LPAR: "(">
  |<_RPAR: ")">
  |<_LBRACE: "{">
  |<_RBRACE: "}">
  |<_LBRACK: "[">
  |<_RBRACK: "]">
  |<_COMMA: ",">
  |<_SEMICOLON: ";">
  |<_SUM: "+">
  |<_SUB: "-">
  |<_MULT: "*">
  |<_DIV: "/">
  |<_MOD: "%">
  |<_EQUAL: "==">
  |<_NEQUAL: "!=">
  |<_GTHAN: ">">
  |<_LTHAN: "<">
  |<_GEQUAL: ">=">
  |<_LEQUAL: "<=">
  |<_LOG_OR: "||">
  |<_LOG_AND: "&&">
  |<_LOG_NOT: "!">
  |<_ASSIGN: "=">
  |<_SUM_ASSIGN: "+=">
  |<_SUB_ASSIGN: "-=">
  |<_MULT_ASSIGN: "*=">
  |<_DIV_ASSIGN: "/=">
  |<_MOD_ASSIGN: "%=">
  |<_COND: "?">
  |<_COLON: ":">


  // cmds

  | <_IF: "if">
  | <_ELSE: "else">
  | <_FOR: "for">
  | <_WHILE: "while">
  | <_READ: "read">
  | <_WRITE: "write">
  | <_SKIP: "skip">
  | <_STOP: "stop">
  | <_RETURN: "return">
  | <_ID: <_CHAR> (<_CHAR> | <_INT>)*>

}

void parseOneLine():
{
  double a;
}
{
  <_ASSIGN>
  {System.out.println("reconhecendo os tokens");}
}
