options{
  LOOKAHEAD=8;
  UNICODE_INPUT=true;
}

PARSER_BEGIN(GraceCompiler)

package main;
import java.util.Stack;
import java.io.*;
import main.semantic.*;
import java.util.ArrayList;
import java.util.List;
import main.exceptions.*;

public class GraceCompiler{

  public static Stack<SymbolList> stackRoot = new Stack<SymbolList>();
  public static int symbolListCount = 0;

  public static void main(String args[]){
    try{
        GraceCompiler parser = new GraceCompiler(new java.io.FileInputStream("main/tests/input.grc"));
        parser.startParsing();

    } catch (Throwable error){
        System.err.println("Syntax Error\n" + error.getLocalizedMessage());
    }
  }

}

PARSER_END(GraceCompiler)

SKIP :
{
  " "
| "\t"
| "\r"
| <"//" (~["\r", "\n"])*>
| "\n"
}

TOKEN :
{

  // definitions
    <_DEF: "def">
    |<_VAR: "var">
    |<_TYPE: "int" | "bool" | "string" | "void">

    // primitives

    |<_BOOL: "true" | "false">
    |<_NUMBER: (["0"-"9"])+>
    |<_STR: ["\""] (<_CHAR> | <_NUMBER> | " " | <_SPECIAL_CHAR>)* ["\""]>




  //  operators and symbols

    |<_LPAR: "(">
    |<_RPAR: ")">
    |<_LBRACE: "{">
    |<_RBRACE: "}">
    |<_LBRACK: "[">
    |<_RBRACK: "]">
    |<_COMMA: ",">
    |<_SEMICOLON: ";">
    |<_ARIT: "+" | "-" | "*" | "/" | "%">
    |<_RELAC: ">" | ">=" | "<" | "<=">
    |<_EQUALITY: "==" | "!=">
    |<_LOGICAL: "||" | "&&" | "!">
    |<_ASSIGN: ("=" | "+=" | "-=" | "*=" | "/=" | "%=")>
    |<_COND: "?">
    |<_COLON: ":">

  // cmds

    | <_IF: "if">
    | <_ELSE: "else">
    | <_FOR: "for">
    | <_WHILE: "while">
    | <_READ: "read">
    | <_WRITE: "write">
    | <_SKIP: "skip">
    | <_STOP: "stop">
    | <_RETURN: "return">


    | <_ID: <_CHAR> (<_CHAR> | <_NUMBER>)*>
    |<_CHAR: ["a"-"z"] | ["A" - "Z"] | ["_"]>
    |<_SPECIAL_CHAR: "!" | ["#"-"~"] >


}

void startParsing():
{
  double a;
}
{
  GLOBAL_START()
  {
    System.out.println ("Compilation Finished");
  }
}

void GLOBAL_START():
{
    SymbolList rootList = new SymbolList(null, null);
    GraceCompiler.stackRoot.push(rootList);
    List<Var> globalVarList = new ArrayList<Var>();
    List<SubProgram> globalSubList = new ArrayList<SubProgram>();
}
{
    (globalVarList = VAR_SECTION(rootList) {rootList.setVarList(globalVarList); rootList.setSubProgramList(globalSubList);}) MAIN_START(rootList)
    {
    }
}

void MAIN_START(SymbolList list):
{
    List<Var> mainVarList = new ArrayList<Var>();
    SymbolList mainSymbolList = new SymbolList(list, mainVarList);
    SymbolList backup = GraceCompiler.stackRoot.peek();
}
{
    (SUBPROGRAM(list))*
    {
    }
}


List<Var> VAR_ROOT(SymbolList list):
{
    Integer counter = 0;
    Var var = new Var();
    Token typeToken;
    List<Var> listOfVar = null;
    Boolean isComposed = false;
}
{
    listOfVar = VAR_ADD(list) <_COLON> typeToken = <_TYPE> <_SEMICOLON>
    {
        Type type = Type.valueOf(typeToken.toString().toUpperCase());

        if(listOfVar != null){
            isComposed = listOfVar.get(0).isComposed();
            if(isComposed.equals(false)){
                for (Var v: listOfVar){
                    if (v.getReferencia() == false){
                        v.setType(type);
                    }
                    else if (v.getReferencia() == true && !v.getType().equals(type)){
                        System.err.print("Semantic error: ");
                        System.err.println("the declaration of variable " + v.getId() + " is not valid, type error");
                    }
                }
            }
            else{
                for(Var v: listOfVar){
                    if (v.getType() != Type.VOID && !v.getType().equals(type)){
                        System.err.println("Invalid declaration of Array variable: " + v.getId() + " Declared type and content of variable are different");
                    }
                    if (v.getReferencia() == false){
                        v.setType(type);
                    }
                }
            }
        }
        if (list.getVarList() != null){
            for (Var v: listOfVar){
                list.addToList(v);
            }
        }
        else{
            list.setVarList(listOfVar);
        }
        return listOfVar;
    }
}

List<Var> VAR_ADD(SymbolList list):
{
    List<Var> listOfVar = new ArrayList<Var>();
    Var var = new Var();
    Token id;
    List<Var> recursiveListOfVar = null;
    String idString;
    String val = new String();
    Type initialized = Type.VOID;
    Boolean isArray = false;

    Type arraySize = Type.VOID;
    List<Type> listOfType = null;
    Type testType = Type.VOID;
}
{
    (id = <_ID> <_LBRACK> arraySize = EXPRESSION(list) <_RBRACK> {isArray = true;}(<_ASSIGN> listOfType = ARRAY_INIT(list))? (<_COMMA> recursiveListOfVar = VAR_ADD(list))?
    | id = <_ID> (<_ASSIGN> (initialized = EXPRESSION(list) | initialized = FUNCALL(list)))* (<_COMMA> recursiveListOfVar = VAR_ADD(list))?)
    {
        idString = id.toString();
        var.setId(idString);
        if (recursiveListOfVar != null){
            for(Var v: recursiveListOfVar){
                listOfVar.add(v);
            }
        }

        if (isArray.equals(false)){
            var.setType(initialized);
            if (initialized != Type.VOID){
                var.setReferencia(true);
            }
        }
        else{
            var.setComposed(true);
            if(arraySize != Type.INT){
                System.err.println("Error in declaration of array " + id.toString() + "; Array size must be of INT type");
            }
            if(listOfType != null){
                testType = listOfType.get(0);
                for(Type t: listOfType){
                    if (testType != t){
                        System.err.println("Error in declaration of array \"" + idString + "\": different types found in initialization");
                    }
                }
                var.setReferencia(true);
                var.setType(testType);
            }
            else{
                var.setReferencia(false);
            }
        }

        listOfVar.add(var);
        return listOfVar;
    }
}

List<Type> ARRAY_INIT(SymbolList list):
{
    List<Type> initList = new ArrayList<Type>();
    Type expression = Type.VOID;
}
{
    <_LBRACE> (expression = EXPRESSION(list) {initList.add(expression);}
     (<_COMMA> expression = EXPRESSION(list) {initList.add(expression);})*)? <_RBRACE>
    {
        return initList;
    }
}


List<Var> VAR_SECTION(SymbolList list):
{
    List<Var> varList = null;
    List<Var> recursiveVar = null;
}
{
    <_VAR> varList = VAR_ROOT(list) (recursiveVar = VAR_SECTION(list))?

    {
        if (recursiveVar != null){
            varList.addAll(recursiveVar);
        }
        return varList;
    }
}



Type TERM(SymbolList list):
{
    Type returnVal = Type.VOID;
    Type type = null;
    Var var = null;
    Token id = null, number = null, bool = null, str = null;
    Var idObj = null;
}
{
    (number = <_NUMBER> | bool = <_BOOL> | str = <_STR> | var = VARIABLE(list))
    {
        if (number != null){
            returnVal = Type.INT;
        }

        if (bool != null){
            returnVal = Type.BOOL;
        }

        if (str != null){
            returnVal = Type.STRING;
        }

        if (var != null){
            returnVal = var.getType();
        }
        return returnVal;
    }
}

SubProgram SUBPROGRAM(SymbolList list):
{
    SubProgram subProg = new SubProgram();
    List<SubProgram> listOfSubProg = new ArrayList<SubProgram>();
    List<Var> parameterList = new ArrayList<Var>();
    SymbolList subProgramList = new SymbolList(list, parameterList);
    List<Var> subProgramVar = new ArrayList<Var>();
    Token typeToken = null;
    Token idToken = null;
    Type subProgType = Type.VOID;


}
{
    (<_DEF> idToken = <_ID> <_LPAR> (parameterList = PARAMETER_LIST())? <_RPAR> (<_COLON> typeToken = <_TYPE>)? {
    {
        if (typeToken != null){
            subProgType = General.updateType(typeToken);
        }
        subProgramVar.addAll(parameterList);
        subProg.setVarList(subProgramVar);
        subProg.setParameterList(parameterList);
        for (Var v: list.getVarList()){
            subProg.getVarList().add(v);
        }
    }
    subProgramVar.addAll(subProg.getVarList());
    subProgramList.setVarList(subProg.getVarList());
    }BLOCK(subProgramList, subProgType)
    )
    {
        subProg.setSubSymbolList(subProgramList);
        subProg.setId(idToken.toString());
        if(list.getSubProgramList() != null){
            list.getSubProgramList().add(subProg);
        }
        else{
            listOfSubProg.add(subProg);
            list.setSubProgramList(listOfSubProg);
        }
        subProg.setType(subProgType);
        return subProg;
    }
}

List<Var> PARAMETER_LIST():
{
    List<Var> parameterList = new ArrayList<Var>();
    List<Var> recursiveList = null;
    Token typeToken;
    Type returnType = Type.VOID;
}
{
    parameterList = PARAMETER_ADD() <_COLON> typeToken = <_TYPE> (<_SEMICOLON> recursiveList = PARAMETER_LIST())?
    {

        returnType = General.updateType(typeToken);

        for (var v: parameterList){
            v.setType(returnType);
        }

        if (recursiveList != null){
            for (var v: recursiveList){
                parameterList.add(v);
            }
        }

        return parameterList;
    }
}

List<Var> PARAMETER_ADD():
{
    Var parameter = new Var();
    List<Var> parameterList = new ArrayList<Var>();
    List<Var> recursiveList = new ArrayList<Var>();
    Token idToken;
    boolean composed = false;
}
{
    (idToken = <_ID> <_LBRACK> <_RBRACK> (<_COMMA> recursiveList = PARAMETER_ADD())? {composed = true;}
    | idToken = <_ID> (<_COMMA> recursiveList = PARAMETER_ADD())?)
    {
        parameter.setId(idToken.toString());
        parameter.setComposed(composed);
        if (recursiveList != null){
            for (var v: recursiveList){
                parameterList.add(v);
            }
        }
        parameterList.add(parameter);
        return parameterList;
    }
}

void BLOCK(SymbolList subProgramList, Type blockType):
{
    List<Var> subProgVarList = new ArrayList<Var>();
}
{
    <_LBRACE> (subProgVarList = VAR_SECTION(subProgramList)
    {
        for (Var v: subProgVarList){
            subProgramList.getVarList().add(v);
        }
    })? (STATEMENT(subProgramList, blockType))? <_RBRACE>
    {
    }
}

void STATEMENT(SymbolList subProgramList, Type blockType):
{
    Type statementType = Type.VOID;
}
{
    (SUBPROGRAM(subProgramList) | COMMAND(subProgramList, blockType)) (STATEMENT(subProgramList, blockType))?
    {
    }
}

void COMMAND(SymbolList subProgramList, Type blockType):
{
    Type commandType = Type.VOID;
}
{
    commandType = ATTRIBUTION(subProgramList) | commandType = IF(subProgramList) | commandType = WHILE(subProgramList)
    | SKIP_CMD(subProgramList, blockType) | STOP_CMD(subProgramList, blockType) | RETURN(subProgramList, blockType)
    | commandType = FUNCALL(subProgramList) | commandType = FOR(subProgramList) | READ_CMD(subProgramList) | WRITE_CMD(subProgramList)
    {
    }
}



void WRITE_CMD(SymbolList subProgramList):
{
    Type writing = Type.VOID;
}
{
    <_WRITE> writing = EXPRESSION(subProgramList) (<_COMMA> writing = EXPRESSION(subProgramList))* <_SEMICOLON>
    {
    }
}

void READ_CMD(SymbolList subProgramList):
{
    Token idToken = null;
    Var var = null;
    Token varToken = null;
}
{
    <_READ> var = VARIABLE(subProgramList) <_SEMICOLON>
    {
        if (var == null){
            System.err.println("Semantic error: Trying to read an undeclared variable");
        }
    }
}

Var VARIABLE(SymbolList subProgramList):
{
    Token idToken = null;
    Var var = new Var();
    SubProgram sub = new SubProgram();
    Type recursive = Type.VOID;
    Var teste = null;
    List<Var> rootList = new ArrayList<Var>();
}
{
    (idToken = <_ID> <_LBRACK> recursive = EXPRESSION(subProgramList) <_RBRACK>
    | (idToken = <_ID> ))
    {
        for(Var v:subProgramList.getVarList()){
            if(v.getId().equals(idToken.toString()) && v.getType() != Type.VOID){
                var = v;
            }
        }
        if (var == null){
            sub = subProgramList.getSubProgram(idToken.toString());
        }
        if (subProgramList.getSubProgramList() != null){
            for (SubProgram s: subProgramList.getSubProgramList()){
                if (s.getId().equals(idToken.toString())){
                    var = s;
                }
            }
        }
        else if (GraceCompiler.stackRoot.peek().getSubProgramList() != null){
            for (SubProgram s: GraceCompiler.stackRoot.peek().getSubProgramList()){
                if (s.getId().equals(idToken.toString())){
                    var = s;
                }
            }
        }
        else{
            System.err.println("Syntactic error: Not declared SubProgram");
        }
        return var;
    }
}


void RETURN(SymbolList subProgramList, Type blockType):
{
    Token returnToken = null;
    Type blockTypeVal = Type.VOID;
}
{
    returnToken = <_RETURN> blockTypeVal = EXPRESSION(subProgramList) <_SEMICOLON>
    {
        if(blockType != Type.VOID && !blockTypeVal.equals(blockType)){
            System.err.println("Semantic error: Block RETURN type is not the same of the declaration");
        }
    }
}

void SKIP_CMD(SymbolList subProgramList, Type blockType):
{
}
{
    <_SKIP> <_SEMICOLON>
    {
        if (blockType != Type.WHILE && blockType != Type.FOR){
            System.err.println("Syntactic error: Bad use of SKIP command");
        }
    }
}

void STOP_CMD(SymbolList subProgramList, Type blockType):
{
}
{
    <_STOP> <_SEMICOLON>
    {
        if (blockType != Type.WHILE && blockType != Type.FOR){
            System.err.println("Syntactic error: Bad use of STOP command");
        }
    }
}

Type FUNCALL(SymbolList subProgramList):
{
    Token idToken = null;
    Type parameter = Type.VOID;
    Type recursiveParameter = Type.VOID;
    List<Type> parameterList = new ArrayList<Type>();
    List<Var> parameterVarList = new ArrayList<Var>();
    SubProgram funCalled = null;
    Var var = null;
}
{
    var = VARIABLE(subProgramList) <_LPAR> (parameterList = FUN_PARAM(subProgramList))? <_SEMICOLON>
    {
        if (subProgramList.getSubProgramList() != null){
            for (SubProgram s: subProgramList.getSubProgramList()){
                if (s.getId().equals(var.getId().toString())){
                    funCalled = s;
                }
            }
        }
        else if (GraceCompiler.stackRoot.peek().getSubProgramList() != null){
            for (SubProgram s: GraceCompiler.stackRoot.peek().getSubProgramList()){
                if (s.getId().equals(var.getId().toString())){
                    funCalled = s;
                }
            }
        }
        else{
            System.err.println("Syntactic error: Not declared SubProgram");
        }
        for(int i = 0; i < parameterList.size(); i++){
            if(parameterList.get(i) != funCalled.getParameterList().get(i).getType()){
                System.err.println("Error calling subprogram: Parameter " + (i+1) + " of different type");
            }
        }
        return funCalled.getType();
    }
}

List<Type> FUN_PARAM(SymbolList subProgramList):
{
    List<Type> parameterList = new ArrayList<Type>();
    List<Type> recursiveParamList = new ArrayList<Type>();
    Type parameter = Type.VOID;
    Type recursiveParameter = Type.VOID;
}
{
    parameter = EXPRESSION(subProgramList) (<_COMMA> recursiveParamList = FUN_PARAM(subProgramList))?
    {
        parameterList.add(parameter);
        for (Type t: recursiveParamList){
            if(t != Type.VOID)
                parameterList.add(t);
        }
        return(parameterList);
    }
}

Type ATTRIBUTION(SymbolList subProgramList):
{
    Token idToken = null;
    Var var = new Var();
    Type idType = Type.VOID;
    Type assignType = Type.VOID;
    Type assignTypeComposed = Type.VOID;
    List<Var> varList = subProgramList.getVarList();
}
{
    var = VARIABLE(subProgramList) (<_LBRACK> <_RBRACK>)? <_ASSIGN>
    (assignType = FUNCALL(subProgramList) | assignType = EXPRESSION(subProgramList))* (<_SEMICOLON>)?
//
    {
        if (var.getType() != Type.VOID && !var.getType().equals(assignType)){
            System.err.println("Semantic error. Uncompatible type in attribution of variable " + var.getId().toString());
        }
        return var.getType();
    }
}


Type IF(SymbolList subProgramList):
{
    Type testType = Type.VOID;
    Type elseType = Type.VOID;
}
{
    <_IF> testType = EXPRESSION(subProgramList) BLOCK(subProgramList, Type.VOID) (elseType = ELSE(subProgramList))?
    {
        if (testType != Type.BOOL){
            System.err.println("Semantic error: Expression in IF command must be of BOOLEAN type");
        }
        return testType;
    }
}

Type ELSE(SymbolList subProgramList):
{
    Type ifType = Type.VOID;
}
{
    <_ELSE> (ifType = IF(subProgramList) | BLOCK(subProgramList, Type.VOID))
    {
        return ifType;
    }
}

Type WHILE(SymbolList subProgramList):
{
    Type testType = Type.VOID;
}
{
    <_WHILE>  <_LPAR> testType = EXPRESSION(subProgramList) BLOCK(subProgramList, Type.WHILE)
    {
        return testType;
    }
}

Type FOR(SymbolList subProgramList):
{
    Type atribType = Type.VOID;
    Type atribExpress = Type.VOID;
    Type atribPass = Type.VOID;
}
{
    <_FOR> <_LPAR> atribType = ATTRIBUTION(subProgramList) atribExpress = EXPRESSION(subProgramList) <_SEMICOLON>
    atribPass = ATTRIBUTION(subProgramList) BLOCK(subProgramList, Type.FOR)
    {
        if (atribExpress != Type.BOOL){
            System.err.println("Error in FOR command: Test expression not a logic value");
        }
        return atribExpress;
    }
}

Type EXPRESSION(SymbolList subProgramList):
{
    Type expressionType = Type.VOID;
    OperationType operationValue = OperationType.VOID;
}
{
    operationValue = OPERATION(subProgramList)
    {
        if (!operationValue.equals(OperationType.VOID)){
            if(operationValue.equals(OperationType.ARIT)){
                expressionType = Type.INT;
            }
            else if(operationValue.equals(OperationType.STRING))
                expressionType = Type.STRING;
            else
                expressionType = Type.BOOL;
        }
        return expressionType;
    }
}


OperationType OPERATION(SymbolList subProgramList):
{
    Type firstTerm = Type.VOID;
    Type secondTerm = Type.VOID;
    OperationType secondTermOp = OperationType.VOID;
    OperationType opType = OperationType.VOID;
    Token operationToken = null;
}
{
    ((<_LPAR>)? firstTerm = TERM(subProgramList)
    (operationToken = <_ARIT> | operationToken = <_RELAC> | operationToken = <_EQUALITY> | operationToken = <_LOGICAL>)
    secondTermOp = OPERATION(subProgramList))

    {
        if(operationToken.equals(null)){
            if(firstTerm != Type.VOID){
                if (firstTerm == Type.INT){
                    opType = OperationType.ARIT;
                }
                else if (firstTerm == Type.STRING){
                    opType = OperationType.STRING;
                }
                else{
                    opType = OperationType.LOGIC;
                }
            }
        }
        else{
            opType = General.updateOperationType(operationToken);
            if (opType.equals(OperationType.ARIT)){
                if(firstTerm != Type.INT){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
            }
            if (opType.equals(OperationType.RELAC)){
                if(secondTermOp != OperationType.ARIT){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
            }
            if (opType.equals(OperationType.LOGIC)){
                if(secondTermOp != OperationType.LOGIC){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
            }
            if (opType.equals(OperationType.EQUALITY)){
                if(secondTermOp == OperationType.ARIT && firstTerm != Type.INT){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
                else if(secondTermOp == OperationType.STRING && firstTerm != Type.STRING){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
                else if((firstTerm != Type.BOOL && secondTermOp == OperationType.ARIT) || (firstTerm != Type.BOOL && secondTermOp == OperationType.STRING)){
                    System.err.println("Semantic error: Trying to operation with different types");

                }
            }
        }
        return opType;
    }
    |((<_LPAR>)? (firstTerm = TERM(subProgramList)) (<_RPAR>)? | firstTerm = TERM(subProgramList))
    {
        if(firstTerm != Type.VOID){
            if(firstTerm == Type.INT){
                return OperationType.ARIT;
            }
            else if(firstTerm == Type.STRING){
                return OperationType.STRING;
            }
            else return OperationType.LOGIC;
        }
    }
}