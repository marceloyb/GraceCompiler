/* Generated By:JavaCC: Do not edit this line. GraceCompiler.java */
package main;
import java.util.Stack;
import java.io.*;
import main.semantic.*;
import java.util.ArrayList;
import java.util.List;
import main.exceptions.*;

public class GraceCompiler implements GraceCompilerConstants {

  public static Stack<SymbolList> stackRoot = new Stack<SymbolList>();
  public static int symbolListCount = 0;

  public static void main(String args[]){
    try{
        GraceCompiler parser = new GraceCompiler(new java.io.FileInputStream(args[0]));
        parser.startParsing();

    } catch (Throwable error){
        System.err.println("Syntax Error\u005cn" + error.getLocalizedMessage());
    }
  }

  static final public void startParsing() throws ParseException {
  double a;
    GLOBAL_START();
    System.out.println ("Compilation Finished");
  }

  static final public void GLOBAL_START() throws ParseException {
    SymbolList rootList = new SymbolList(null, null);
    GraceCompiler.stackRoot.push(rootList);
    List<Var> globalVarList = new ArrayList<Var>();
    List<SubProgram> globalSubList = new ArrayList<SubProgram>();
    globalVarList = VAR_SECTION(rootList);
                                            rootList.setVarList(globalVarList); rootList.setSubProgramList(globalSubList);
    MAIN_START(rootList);

  }

  static final public void MAIN_START(SymbolList list) throws ParseException {
    List<Var> mainVarList = new ArrayList<Var>();
    SymbolList mainSymbolList = new SymbolList(list, mainVarList);
    SymbolList backup = GraceCompiler.stackRoot.peek();
    label_1:
    while (true) {
      if (jj_2_1(8)) {
        ;
      } else {
        break label_1;
      }
      SUBPROGRAM(list);
    }
        for(SubProgram s: list.getSubProgramList()){
            System.out.println(s.getId());
        }
  }

  static final public List<Var> VAR_ROOT(SymbolList list) throws ParseException {
    Integer counter = 0;
    Var var = new Var();
    Token typeToken;
    List<Var> listOfVar = null;
    Boolean isComposed = false;
    listOfVar = VAR_ADD(list);
    jj_consume_token(_COLON);
    typeToken = jj_consume_token(_TYPE);
    jj_consume_token(_SEMICOLON);
        Type type = Type.valueOf(typeToken.toString().toUpperCase());
        System.out.println(type);

        if(listOfVar != null){
            isComposed = listOfVar.get(0).isComposed();
            if(isComposed.equals(false)){
                for (Var v: listOfVar){
                    if (v.getReferencia() == false){
                        v.setType(type);
                    }
                    else if (v.getReferencia() == true && !v.getType().equals(type)){
                        System.err.print("Semantic error: ");
                        System.err.println("the declaration of variable " + v.getId() + " is not valid, type error");
                    }

                    System.out.println("ID: " + v.getId() + " tipo " + v.getType());
                }
            }
            else{
                for(Var v: listOfVar){
                    if (v.getType() != Type.VOID && !v.getType().equals(type)){
                        System.err.println("Invalid declaration of Array variable: " + v.getId() + " Declared type and content of variable are different");
                    }
                    if (v.getReferencia() == false){
                        v.setType(type);
                    }
                }
            }
        }
        if (list.getVarList() != null){
            for (Var v: listOfVar){
                System.out.println(v.getId());
                list.addToList(v);
            }
        }
        else{
            list.setVarList(listOfVar);
        }
        System.out.println("terminando var root");
        {if (true) return listOfVar;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Var> VAR_ADD(SymbolList list) throws ParseException {
    List<Var> listOfVar = new ArrayList<Var>();
    Var var = new Var();
    Token id;
    List<Var> recursiveListOfVar = null;
    String idString;
    String val = new String();
    Type initialized = Type.VOID;
    Boolean isArray = false;

    Type arraySize = Type.VOID;
    List<Type> listOfType = null;
    Type testType = Type.VOID;
    if (jj_2_6(8)) {
      id = jj_consume_token(_ID);
      jj_consume_token(_LBRACK);
      arraySize = EXPRESSION(list);
      jj_consume_token(_RBRACK);
                                                                  isArray = true;
      if (jj_2_2(8)) {
        jj_consume_token(_ASSIGN);
        listOfType = ARRAY_INIT(list);
      } else {
        ;
      }
      if (jj_2_3(8)) {
        jj_consume_token(_COMMA);
        recursiveListOfVar = VAR_ADD(list);
      } else {
        ;
      }
    } else if (jj_2_7(8)) {
      id = jj_consume_token(_ID);
      label_2:
      while (true) {
        if (jj_2_4(8)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(_ASSIGN);
        initialized = TERM(list);
      }
      if (jj_2_5(8)) {
        jj_consume_token(_COMMA);
        recursiveListOfVar = VAR_ADD(list);
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        idString = id.toString();
        var.setId(idString);
        if (recursiveListOfVar != null){
            for(Var v: recursiveListOfVar){
                listOfVar.add(v);
            }
        }

        if (isArray.equals(false)){
            var.setType(initialized);
            System.out.println(idString);
            if (initialized != Type.VOID){
                var.setReferencia(true);
            }
        }
        else{
            var.setComposed(true);
            if(arraySize != Type.INT){
                System.err.println("Error in declaration of array " + id.toString() + "; Array size must be of INT type");
            }
            if(listOfType != null){
                testType = listOfType.get(0);
                for(Type t: listOfType){
                    if (testType != t){
                        System.err.println("Error in declaration of array \u005c"" + idString + "\u005c": different types found in initialization");
                    }
                }
                var.setReferencia(true);
                var.setType(testType);
            }
            else{
                var.setReferencia(false);
            }
        }

        System.out.println("terminando var add");
        listOfVar.add(var);
        {if (true) return listOfVar;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Type> ARRAY_INIT(SymbolList list) throws ParseException {
    List<Type> initList = new ArrayList<Type>();
    Type expression = Type.VOID;
    jj_consume_token(_LBRACE);
    if (jj_2_9(8)) {
      expression = EXPRESSION(list);
                                              initList.add(expression);
      label_3:
      while (true) {
        if (jj_2_8(8)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(_COMMA);
        expression = EXPRESSION(list);
                                              initList.add(expression);
      }
    } else {
      ;
    }
    jj_consume_token(_RBRACE);
        {if (true) return initList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Var> VAR_SECTION(SymbolList list) throws ParseException {
    List<Var> varList = null;
    List<Var> recursiveVar = null;
    jj_consume_token(_VAR);
    varList = VAR_ROOT(list);
    if (jj_2_10(8)) {
      recursiveVar = VAR_SECTION(list);
    } else {
      ;
    }
        if (recursiveVar != null){
            varList.addAll(recursiveVar);
        }
        System.out.println("saiu no var section");
        {if (true) return varList;}
    throw new Error("Missing return statement in function");
  }

  static final public Type TERM(SymbolList list) throws ParseException {
    Type returnVal = Type.VOID;
    Type type = null;
    Var var = null;
    Token id = null, number = null, bool = null, str = null;
    Var idObj = null;
    if (jj_2_11(8)) {
      number = jj_consume_token(_NUMBER);
    } else if (jj_2_12(8)) {
      bool = jj_consume_token(_BOOL);
    } else if (jj_2_13(8)) {
      str = jj_consume_token(_STR);
    } else if (jj_2_14(8)) {
      var = VARIABLE(list);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (number != null){
            returnVal = Type.INT;
        }

        if (bool != null){
            returnVal = Type.BOOL;
        }

        if (str != null){
            returnVal = Type.STRING;
        }

        if (var != null){
            returnVal = var.getType();
        }
        System.out.println("saindo term");
        System.out.println(returnVal);
        {if (true) return returnVal;}
    throw new Error("Missing return statement in function");
  }

  static final public SubProgram SUBPROGRAM(SymbolList list) throws ParseException {
    SubProgram subProg = new SubProgram();
    List<SubProgram> listOfSubProg = new ArrayList<SubProgram>();
    List<Var> parameterList = new ArrayList<Var>();
    SymbolList subProgramList = new SymbolList(list, parameterList);
    List<Var> subProgramVar = new ArrayList<Var>();
    Token typeToken = null;
    Token idToken = null;
    Type subProgType = Type.VOID;
    jj_consume_token(_DEF);
    idToken = jj_consume_token(_ID);
    jj_consume_token(_LPAR);
    if (jj_2_15(8)) {
      parameterList = PARAMETER_LIST();
    } else {
      ;
    }
    jj_consume_token(_RPAR);
    if (jj_2_16(8)) {
      jj_consume_token(_COLON);
      typeToken = jj_consume_token(_TYPE);
    } else {
      ;
    }
    {
        if (typeToken != null){
            subProgType = General.updateType(typeToken);
        }
//      seta as listas de variaveis declaradas como parametro e as variaveis do escopo
        subProgramVar.addAll(parameterList);
        subProg.setVarList(subProgramVar);
        subProg.setParameterList(parameterList);
//        Lista de variáveis do subprograma = variaveis do parametro + da lista pai
        for (Var v: list.getVarList()){
            subProg.getVarList().add(v);
        }
    }
    subProgramVar.addAll(subProg.getVarList());
    subProgramList.setVarList(subProg.getVarList());
    BLOCK(subProgramList, subProgType);
        subProg.setSubSymbolList(subProgramList);
        subProg.setId(idToken.toString());
        if(list.getSubProgramList() != null){
            list.getSubProgramList().add(subProg);
        }
        else{
            listOfSubProg.add(subProg);
            list.setSubProgramList(listOfSubProg);
        }
        subProg.setType(subProgType);
        {if (true) return subProg;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Var> PARAMETER_LIST() throws ParseException {
    List<Var> parameterList = new ArrayList<Var>();
    List<Var> recursiveList = null;
    Token typeToken;
    Type returnType = Type.VOID;
    parameterList = PARAMETER_ADD();
    jj_consume_token(_COLON);
    typeToken = jj_consume_token(_TYPE);
    if (jj_2_17(8)) {
      jj_consume_token(_SEMICOLON);
      recursiveList = PARAMETER_LIST();
    } else {
      ;
    }
        returnType = General.updateType(typeToken);

        for (var v: parameterList){
            v.setType(returnType);
        }

        if (recursiveList != null){
            for (var v: recursiveList){
                parameterList.add(v);
            }
        }

        for (var v: parameterList){
            System.out.println(v.getId() + " " + v.getType());
        }
        System.out.println("saindo do parameter list");
        {if (true) return parameterList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Var> PARAMETER_ADD() throws ParseException {
    Var parameter = new Var();
    List<Var> parameterList = new ArrayList<Var>();
    List<Var> recursiveList = new ArrayList<Var>();
    Token idToken;
    boolean composed = false;
    if (jj_2_20(8)) {
      idToken = jj_consume_token(_ID);
      jj_consume_token(_LBRACK);
      jj_consume_token(_RBRACK);
      if (jj_2_18(8)) {
        jj_consume_token(_COMMA);
        recursiveList = PARAMETER_ADD();
      } else {
        ;
      }
                                                                                      composed = true;
    } else if (jj_2_21(8)) {
      idToken = jj_consume_token(_ID);
      if (jj_2_19(8)) {
        jj_consume_token(_COMMA);
        recursiveList = PARAMETER_ADD();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        parameter.setId(idToken.toString());
        parameter.setComposed(composed);
        if (recursiveList != null){
            for (var v: recursiveList){
                parameterList.add(v);
            }
        }
        parameterList.add(parameter);
        {if (true) return parameterList;}
    throw new Error("Missing return statement in function");
  }

  static final public void BLOCK(SymbolList subProgramList, Type blockType) throws ParseException {
    List<Var> subProgVarList = new ArrayList<Var>();
    jj_consume_token(_LBRACE);
    if (jj_2_22(8)) {
      subProgVarList = VAR_SECTION(subProgramList);
        for (Var v: subProgVarList){
            subProgramList.getVarList().add(v);
        }
    } else {
      ;
    }
         System.out.println("comeou bloco");
    if (jj_2_23(8)) {
      STATEMENT(subProgramList, blockType);
    } else {
      ;
    }
                                                                                      System.out.println("trabalho fdp");
    jj_consume_token(_RBRACE);
        System.out.println("entrou no block");
  }

  static final public void STATEMENT(SymbolList subProgramList, Type blockType) throws ParseException {
      System.out.println("come\u00e7ou statement");
    if (jj_2_24(8)) {
      SUBPROGRAM(subProgramList);
    } else if (jj_2_25(8)) {
      COMMAND(subProgramList, blockType);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_26(8)) {
      STATEMENT(subProgramList, blockType);
    } else {
      ;
    }
        System.out.println("entrou no steatement");
  }

  static final public void COMMAND(SymbolList subProgramList, Type blockType) throws ParseException {
    Type commandType = Type.VOID;
    if (jj_2_27(8)) {
      commandType = ATTRIBUTION(subProgramList);
    } else if (jj_2_28(8)) {
      commandType = IF(subProgramList);
    } else if (jj_2_29(8)) {
      commandType = WHILE(subProgramList);
    } else if (jj_2_30(8)) {
      SKIP_CMD(subProgramList, blockType);
    } else if (jj_2_31(8)) {
      STOP_CMD(subProgramList, blockType);
    } else if (jj_2_32(8)) {
      RETURN(subProgramList, blockType);
    } else if (jj_2_33(8)) {
      commandType = FUNCALL(subProgramList);
    } else if (jj_2_34(8)) {
      commandType = FOR(subProgramList);
    } else if (jj_2_35(8)) {
      READ_CMD(subProgramList);
    } else if (jj_2_36(8)) {
      WRITE_CMD(subProgramList);

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void WRITE_CMD(SymbolList subProgramList) throws ParseException {
    Type writing = Type.VOID;
    jj_consume_token(_WRITE);
              System.out.println("entrou no comando write");
    writing = EXPRESSION(subProgramList);
    label_4:
    while (true) {
      if (jj_2_37(8)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(_COMMA);
      writing = EXPRESSION(subProgramList);
    }
    jj_consume_token(_SEMICOLON);

  }

  static final public void READ_CMD(SymbolList subProgramList) throws ParseException {
    Token idToken = null;
    Var var = null;
    Token varToken = null;
    jj_consume_token(_READ);
             System.out.println("entrou no comando read");
    var = VARIABLE(subProgramList);
    jj_consume_token(_SEMICOLON);
        if (var == null){
            System.err.println("Semantic error: Trying to read an undeclared variable");
        }
  }

  static final public Var VARIABLE(SymbolList subProgramList) throws ParseException {
    Token idToken = null;
    Var var = new Var();
    SubProgram sub = new SubProgram();
    Type recursive = Type.VOID;
    Var teste = null;
    List<Var> rootList = new ArrayList<Var>();
    if (jj_2_38(8)) {
      idToken = jj_consume_token(_ID);
      jj_consume_token(_LBRACK);
      recursive = EXPRESSION(subProgramList);
      jj_consume_token(_RBRACK);
    } else if (jj_2_39(8)) {
      idToken = jj_consume_token(_ID);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        for(Var v:subProgramList.getVarList()){
            if(v.getId().equals(idToken.toString()) && v.getType() != Type.VOID){
                var = v;
            }
        }
        if (var == null){
            sub = subProgramList.getSubProgram(idToken.toString());
        }
        if (subProgramList.getSubProgramList() != null){
            for (SubProgram s: subProgramList.getSubProgramList()){
                if (s.getId().equals(idToken.toString())){
                    var = s;
                }
            }
        }
        else if (GraceCompiler.stackRoot.peek().getSubProgramList() != null){
            for (SubProgram s: GraceCompiler.stackRoot.peek().getSubProgramList()){
                if (s.getId().equals(idToken.toString())){
                    var = s;
                }
            }
        }
        else{
            System.err.println("Syntactic error: Not declared SubProgram");
        }
        {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public void RETURN(SymbolList subProgramList, Type blockType) throws ParseException {
    Token returnToken = null;
    Type blockTypeVal = Type.VOID;
    returnToken = jj_consume_token(_RETURN);
    blockTypeVal = EXPRESSION(subProgramList);
    jj_consume_token(_SEMICOLON);
        if(blockType != Type.VOID && !blockTypeVal.equals(blockType)){
            System.err.println("Semantic error: Block RETURN type is not the same of the declaration");
        }
  }

  static final public void SKIP_CMD(SymbolList subProgramList, Type blockType) throws ParseException {
    jj_consume_token(_SKIP);
    jj_consume_token(_SEMICOLON);
        if (blockType != Type.WHILE && blockType != Type.FOR){
            System.err.println("Syntactic error: Bad use of SKIP command");
        }
  }

  static final public void STOP_CMD(SymbolList subProgramList, Type blockType) throws ParseException {
    jj_consume_token(_STOP);
    jj_consume_token(_SEMICOLON);
        if (blockType != Type.WHILE && blockType != Type.FOR){
            System.err.println("Syntactic error: Bad use of STOP command");
        }
  }

  static final public Type FUNCALL(SymbolList subProgramList) throws ParseException {
    Token idToken = null;
    Type parameter = Type.VOID;
    Type recursiveParameter = Type.VOID;
    List<Type> parameterList = new ArrayList<Type>();
    List<Var> parameterVarList = new ArrayList<Var>();
    SubProgram funCalled = null;
    Var var = null;
    var = VARIABLE(subProgramList);
    jj_consume_token(_LPAR);
    if (jj_2_40(8)) {
      parameterList = FUN_PARAM(subProgramList);
    } else {
      ;
    }
    jj_consume_token(_SEMICOLON);
        if (subProgramList.getSubProgramList() != null){
            for (SubProgram s: subProgramList.getSubProgramList()){
                if (s.getId().equals(var.getId().toString())){
                    funCalled = s;
                }
            }
        }
        else if (GraceCompiler.stackRoot.peek().getSubProgramList() != null){
            for (SubProgram s: GraceCompiler.stackRoot.peek().getSubProgramList()){
                if (s.getId().equals(var.getId().toString())){
                    funCalled = s;
                }
            }
        }
        else{
            System.err.println("Syntactic error: Not declared SubProgram");
        }
        for(int i = 0; i < parameterList.size(); i++){
            if(parameterList.get(i) != funCalled.getParameterList().get(i).getType()){
                System.err.println("Error calling subprogram: Parameter " + (i+1) + " of different type");
            }
        }
        {if (true) return funCalled.getType();}
    throw new Error("Missing return statement in function");
  }

  static final public List<Type> FUN_PARAM(SymbolList subProgramList) throws ParseException {
    List<Type> parameterList = new ArrayList<Type>();
    List<Type> recursiveParamList = new ArrayList<Type>();
    Type parameter = Type.VOID;
    Type recursiveParameter = Type.VOID;
    parameter = EXPRESSION(subProgramList);
    if (jj_2_41(8)) {
      jj_consume_token(_COMMA);
      recursiveParamList = FUN_PARAM(subProgramList);
    } else {
      ;
    }
        parameterList.add(parameter);
        for (Type t: recursiveParamList){
            if(t != Type.VOID)
                parameterList.add(t);
        }
        {if (true) return(parameterList);}
    throw new Error("Missing return statement in function");
  }

  static final public Type ATTRIBUTION(SymbolList subProgramList) throws ParseException {
    Token idToken = null;
    Var var = new Var();
    Type idType = Type.VOID;
    Type assignType = Type.VOID;
    Type assignTypeComposed = Type.VOID;
    List<Var> varList = subProgramList.getVarList();
    var = VARIABLE(subProgramList);
    if (jj_2_42(8)) {
      jj_consume_token(_LBRACK);
      jj_consume_token(_RBRACK);
    } else {
      ;
    }
    jj_consume_token(_ASSIGN);
    if (jj_2_43(8)) {
      assignType = FUNCALL(subProgramList);
    } else if (jj_2_44(8)) {
      assignType = EXPRESSION(subProgramList);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_45(8)) {
      jj_consume_token(_SEMICOLON);
    } else {
      ;
    }
        System.out.println(var.getType());
        if (var.getType() != Type.VOID && !var.getType().equals(assignType)){
            System.err.println("Semantic error. Uncompatible type in attribution of variable " + var.getId().toString());
        }
        System.out.println(assignType);
        {if (true) return var.getType();}
    throw new Error("Missing return statement in function");
  }

  static final public Type IF(SymbolList subProgramList) throws ParseException {
    Type testType = Type.VOID;
    Type elseType = Type.VOID;
     System.out.println("entrou if");
    jj_consume_token(_IF);
    testType = EXPRESSION(subProgramList);
                                                                                    System.out.println("vai come\u00e7ar bloco if");
    BLOCK(subProgramList, Type.VOID);
    if (jj_2_46(8)) {
      elseType = ELSE(subProgramList);
    } else {
      ;
    }
        if (testType != Type.BOOL){
            System.err.println("Semantic error: Expression in IF command must be of BOOLEAN type");
        }
        {if (true) return testType;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ELSE(SymbolList subProgramList) throws ParseException {
    Type ifType = Type.VOID;
    jj_consume_token(_ELSE);
    if (jj_2_47(8)) {
      ifType = IF(subProgramList);
    } else if (jj_2_48(8)) {
      BLOCK(subProgramList, Type.VOID);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return ifType;}
    throw new Error("Missing return statement in function");
  }

  static final public Type WHILE(SymbolList subProgramList) throws ParseException {
    Type testType = Type.VOID;
    jj_consume_token(_WHILE);
              System.out.println("entrou while");
    jj_consume_token(_LPAR);
    testType = EXPRESSION(subProgramList);
    BLOCK(subProgramList, Type.WHILE);
        {if (true) return testType;}
    throw new Error("Missing return statement in function");
  }

  static final public Type FOR(SymbolList subProgramList) throws ParseException {
    Type atribType = Type.VOID;
    Type atribExpress = Type.VOID;
    Type atribPass = Type.VOID;
    jj_consume_token(_FOR);
    jj_consume_token(_LPAR);
    atribType = ATTRIBUTION(subProgramList);
    atribExpress = EXPRESSION(subProgramList);
    jj_consume_token(_SEMICOLON);
    atribPass = ATTRIBUTION(subProgramList);
                                             System.out.println("entrando do for");
    BLOCK(subProgramList, Type.FOR);
        if (atribExpress != Type.BOOL){
            System.err.println("Error in FOR command: Test expression not a logic value");
        }
        {if (true) return atribExpress;}
    throw new Error("Missing return statement in function");
  }

  static final public Type EXPRESSION(SymbolList subProgramList) throws ParseException {
    Type expressionType = Type.VOID;
    OperationType operationValue = OperationType.VOID;
    operationValue = OPERATION(subProgramList);
        if (!operationValue.equals(OperationType.VOID)){
            if(operationValue.equals(OperationType.ARIT)){
                expressionType = Type.INT;
            }
            else if(operationValue.equals(OperationType.STRING))
                expressionType = Type.STRING;
            else
                expressionType = Type.BOOL;
        }
        {if (true) return expressionType;}
    throw new Error("Missing return statement in function");
  }

//OperationType OPERATION(SymbolList subProgramList):
//{
//    Type firstTerm = Type.VOID;
//    Type secondTerm = Type.VOID;
//    OperationType firstTermOp = OperationType.VOID;
//    OperationType secondTermOp = OperationType.VOID;
//    OperationType opType = OperationType.VOID;
//    Token operationToken = null;
//    Token firstTermToken = null;
//    Token secondTermToken = null;
//}
//{
//    (firstTerm = TERM(subProgramList) | <_LPAR> firstTermOp = OPERATION(subProgramList))
//    ((operationToken = <_ARIT> | operationToken = <_RELAC> | operationToken = <_EQUALITY> | operationToken = <_LOGICAL>)
//    (secondTerm = TERM(subProgramList) | <_LPAR> secondTermOp = OPERATION(subProgramList)))?
//    {
//        if(operationToken != null){
//            if (!firstTermOp.equals(OperationType.VOID)){
//                if(firstTermOp.equals(OperationType.ARIT)){
//                    firstTerm = Type.INT;
//                }
//                else firstTerm = Type.BOOL;
//            }
//
//            if (!secondTermOp.equals(OperationType.VOID)){
//                if(secondTermOp.equals(OperationType.ARIT)){
//                    secondTerm = Type.INT;
//                }
//                else secondTerm = Type.BOOL;
//            }
//
//            if(!firstTerm.equals(secondTerm)){
//                System.err.println("Semantic error: " + operationToken.toString() + " is impossible with " + firstTerm + " and " + secondTerm);
//            }
//
//            opType = General.updateOperationType(operationToken);
//        }
//        else{
//            if(firstTerm.equals(Type.INT)){
//                opType = OperationType.ARIT;
//            }
//            else if (firstTerm.equals(Type.STRING)){
//                opType = OperationType.STRING;
//            }
//            else if (firstTerm.equals(Type.BOOL)){
//                opType = OperationType.LOGIC;
//            }
//        }
//        return opType;
//    }
//}

// uma operação pode ser um valor unico ou uma operação entre valores
  static final public OperationType OPERATION(SymbolList subProgramList) throws ParseException {
    Type firstTerm = Type.VOID;
    Type secondTerm = Type.VOID;
    OperationType secondTermOp = OperationType.VOID;
    OperationType opType = OperationType.VOID;
    Token operationToken = null;
    if (jj_2_58(8)) {
      if (jj_2_49(8)) {
        jj_consume_token(_LPAR);
      } else {
        ;
      }
      firstTerm = TERM(subProgramList);
      if (jj_2_50(8)) {
        operationToken = jj_consume_token(_ARIT);
                               System.out.println("entrada do operation");
      } else if (jj_2_51(8)) {
        operationToken = jj_consume_token(_RELAC);
      } else if (jj_2_52(8)) {
        operationToken = jj_consume_token(_EQUALITY);
      } else if (jj_2_53(8)) {
        operationToken = jj_consume_token(_LOGICAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      secondTermOp = OPERATION(subProgramList);
        if(operationToken.equals(null)){
            if(firstTerm != Type.VOID){
                if (firstTerm == Type.INT){
                    opType = OperationType.ARIT;
                }
                else if (firstTerm == Type.STRING){
                    opType = OperationType.STRING;
                }
                else{
                    opType = OperationType.LOGIC;
                }
            }
        }
        else{
            opType = General.updateOperationType(operationToken);
            if (opType.equals(OperationType.ARIT)){
                if(secondTermOp != OperationType.ARIT){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
            }
            if (opType.equals(OperationType.RELAC)){
                if(secondTermOp != OperationType.ARIT){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
            }
            if (opType.equals(OperationType.EQUALITY)){
                if(secondTermOp == OperationType.ARIT && firstTerm != Type.INT){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
                else if(secondTermOp == OperationType.STRING && firstTerm != Type.STRING){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
                else if((firstTerm != Type.BOOL && secondTermOp == OperationType.ARIT) || (firstTerm != Type.BOOL && secondTermOp == OperationType.STRING)){
                    System.err.println("Semantic error: Trying to operation with different types");
                }
            }
        }
        {if (true) return opType;}
    } else if (jj_2_59(8)) {
      if (jj_2_56(8)) {
        if (jj_2_54(8)) {
          jj_consume_token(_LPAR);
        } else {
          ;
        }
        firstTerm = TERM(subProgramList);
        if (jj_2_55(8)) {
          jj_consume_token(_RPAR);
        } else {
          ;
        }
      } else if (jj_2_57(8)) {
        firstTerm = TERM(subProgramList);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        if(firstTerm != Type.VOID){
            if(firstTerm == Type.INT){
                {if (true) return OperationType.ARIT;}
            }
            else if(firstTerm == Type.STRING){
                {if (true) return OperationType.STRING;}
            }
            else {if (true) return OperationType.LOGIC;}
        }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(_COLON)) return true;
    if (jj_scan_token(_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(_COMMA)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(_STOP)) return true;
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(_SKIP)) return true;
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(_LOGICAL)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(_RETURN)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(_COLON)) return true;
    if (jj_scan_token(_TYPE)) return true;
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(_STR)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(_DEF)) return true;
    if (jj_scan_token(_ID)) return true;
    if (jj_scan_token(_LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    if (jj_scan_token(_RPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(_COMMA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(_BOOL)) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(_EQUALITY)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(_FOR)) return true;
    if (jj_scan_token(_LPAR)) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(_SEMICOLON)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(_ID)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(_RPAR)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(_ID)) return true;
    if (jj_scan_token(_LBRACK)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(_RBRACK)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(_WHILE)) return true;
    if (jj_scan_token(_LPAR)) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(_NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(_ASSIGN)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_scan_token(_RELAC)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(_ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(_READ)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(_LBRACK)) return true;
    if (jj_scan_token(_RBRACK)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(_WRITE)) return true;
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(_VAR)) return true;
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(_IF)) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(_COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(_COMMA)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(_COMMA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_scan_token(_LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(_LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    if (jj_scan_token(_RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) return true;
    }
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(_COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    if (jj_scan_token(_ASSIGN)) return true;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(_SEMICOLON)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(_LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    if (jj_scan_token(_RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(_COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(_ASSIGN)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(_COLON)) return true;
    if (jj_scan_token(_TYPE)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(_ID)) return true;
    if (jj_scan_token(_LBRACK)) return true;
    if (jj_scan_token(_RBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(_LPAR)) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(_ARIT)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    return false;
  }

  static private boolean jj_3_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    }
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(_ID)) return true;
    if (jj_scan_token(_LBRACK)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(_RBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(_LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    if (jj_scan_token(_SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GraceCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[59];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GraceCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GraceCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GraceCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GraceCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GraceCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GraceCompiler(GraceCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GraceCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 59; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
