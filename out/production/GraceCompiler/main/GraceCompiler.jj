options{
  LOOKAHEAD=6;
  UNICODE_INPUT=true;
}

PARSER_BEGIN(GraceCompiler)

package main;
import java.io.*;
import main.semantic.*;
import java.util.ArrayList;
import java.util.List;

public class GraceCompiler{

  public static void main(String args[]){
    try{
        GraceCompiler parser = new GraceCompiler(new java.io.FileInputStream(args[0]));
        parser.startParsing();

    } catch (Throwable error){
        System.out.println("Syntax Error\n" + error.getMessage());
    }
  }

}

PARSER_END(GraceCompiler)

SKIP :
{
  " "
| "\t"
| "\r"
| <"//" (~["\r", "\n"])*>
}

TOKEN :
{
 
  // definitions
    <_DEF: "def">
    |<_VAR: "var">
    |<_TYPE: "int" | "bool" | "string" | "void">


  //  operators and symbols

    |<_LPAR: "(">
    |<_RPAR: ")">
    |<_LBRACE: "{">
    |<_RBRACE: "}">
    |<_LBRACK: "[">
    |<_RBRACK: "]">
    |<_COMMA: ",">
    |<_SEMICOLON: ";">
    |<_SUM: "+">
    |<_SUB: "-">
    |<_MULT: "*">
    |<_DIV: "/">
    |<_MOD: "%">
    |<_EQUAL: "==">
    |<_NEQUAL: "!=">
    |<_GTHAN: ">">
    |<_LTHAN: "<">
    |<_GEQUAL: ">=">
    |<_LEQUAL: "<=">
    |<_LOG_OR: "||">
    |<_LOG_AND: "&&">
    |<_LOG_NOT: "!">
    |<_ASSIGN: "=">
    |<_SUM_ASSIGN: "+=">
    |<_SUB_ASSIGN: "-=">
    |<_MULT_ASSIGN: "*=">
    |<_DIV_ASSIGN: "/=">
    |<_MOD_ASSIGN: "%=">
    |<_COND: "?">
    |<_COLON: ":">

  // cmds

    | <_IF: "if">
    | <_ELSE: "else">
    | <_FOR: "for">
    | <_WHILE: "while">
    | <_READ: "read">
    | <_WRITE: "write">
    | <_SKIP: "skip">
    | <_STOP: "stop">
    | <_RETURN: "return">


    | <_ID: <_CHAR> (<_CHAR> | <_INT>)*>

    // primitives
    |<_BOOL: "true" | "false">
    |<_INT: (["0"-"9"])+>
    |<_STR: ["\""] (<_CHAR> | <_INT> | " ")* ["\""]>
    |<_CHAR: ["a"-"z"] | ["A" - "Z"] | ["_"]>

}

void startParsing():
{
  double a;
}
{
  VAR()
}

// Variable declaration rule
void VAR():
{
    Var var = new Var();
    Token typeToken;
    List<Var> listOfVar = new ArrayList<Var>();
}
{
    <_VAR> listOfVar = VAR_ADD() <_COLON> typeToken = <_TYPE> <_SEMICOLON>
    {

        Type type = Type.valueOf(typeToken.toString().toUpperCase());
        General.updateVar(listOfVar, type);
        for (Var v: listOfVar){
            System.out.println(v.getId().toString());
            System.out.println(v.getType().toString());
        }
    }
}

List<Var> VAR_ADD():
{
    List<Var> listOfVar = new ArrayList<Var>();
    Var var = new Var();
    Token id;
    String idString;
    String val = new String();
}
{
    id = <_ID> (<_ASSIGN> (<_INT> | <_CHAR>)*)*
    {
        idString = id.toString();
        var.setId(idString);
        listOfVar.add(var);
        return listOfVar;
    }
}